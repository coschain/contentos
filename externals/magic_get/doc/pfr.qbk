[library Boost.Precise and Flat Reflection
    [quickbook 1.6]
    [version 1.0]
    [copyright 2016-2017 Antony Polukhin]
    [category Language Features Emulation]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[section Motivation]

In C++ we have:

* tuples - types that provide access to members by index. Those are useful for generic programming.
* structures - types with named fields that do not provide access to members by index. Those are just easy to use.

This library provides tuple like methods for aggregate initializable structures, making them usable in contexts were only tuples were useful.

[note All you have to do is to add `#include <boost/pfr.hpp>`.

No macro or other type/member registrations required.]


[import ../example/examples.cpp]

The two different types of reflection are:

* [*Precise] reflection, where each field type is represented as it actually exists, even if the type is itself a user-defined type.
* [*Flat] reflection, where user-defined types are represented by their individual field types, and all other types are represented as they actually exists.

As an example:

[pfr_intro]


Boost.Precise and Flat Reflection (Boost.PFR) adds following out-of-the-box functionality for aggregate initializable structures:

* comparison operators
* heterogeneous comparators
* hash
* stream operators
* access to members by index
* member reflections
* methods for cooperation with `std::tuple`
* methods to visit each field of the structure


[warning This is not an official Boost library! It wasn't reviewed and can't be downloaded from www.boost.org. This library is available to the community to know real interest and get comments for refinement. The intention is to submit library to formal review, if community think that it is interesting!]

[caution This is a C++14 library! Pre C++14 compilers (C++11, C++03...) are not supported]

[endsect]

[section Tutorial]

[section Accessing POD member by index] [pfr_example_get] [endsect]
[section Flattening] [pfr_example_flattening] [pfr_example_flattening_2] [endsect]
[/ [section Counting fields] [pfr_example_tuple_size] [endsect] ]

[section Flat or Precise functions to chose]
All the functions that have `flat_` prefix and are declared in `boost/pfr/flat/*` headers the [*flat] functions, other function are [*precise] and are declared in `boost/pfr/precise/*`. In previous example you've seen how the the flattening works.

* If you wish types flattened - use [*flat] functions
* If you use types with C arrays - use [*flat] functions
* Otherwise use [*precise] functions

[warning MSVC currently supports only [*precise] functions and only in /std:c++latest or /std:c++17 modes.]

[endsect]


[section Three ways of getting operators ]

There are three ways to start using Boost.PFR hashing, comparison and streaming operators for type `T` in your code. Each method has it's own drawbacks and suits own cases.

[table:flat_ops_comp Different approaches for operators
    [[ Approach
    ][ Defines operators in global namespace ][ Defined operators could be found by ADL ][ Works for local types ][ Usable localy, without affecting code from other scopes ][ Ignores implicit conversion operators ][ Respects user defined operators ]]

    [[
        [headerref boost/pfr/precise/ops.hpp using\u00A0namespace\u00A0boost::pfr::ops;]

        [headerref boost/pfr/flat/ops.hpp using\u00A0namespace\u00A0boost::pfr::flat_ops;]
    ][ no ][ no ][ yes ][ yes ][ no ][ yes ]]

    [[
        [macroref BOOST_PFR_FLAT_FUNCTIONS_FOR]
        
        [macroref BOOST_PFR_PRECISE_FUNCTIONS_FOR]  
    ][ yes if T is in it ][ yes ][ no ][ no, but could be limited to translation unit ][ yes for T ] [ no (compile time error) ]]

    [[
        [headerref boost/pfr/flat/global_ops.hpp]

        [headerref boost/pfr/precise/global_ops.hpp]
    ][ yes ][ yes ][ yes ][ no, but could be limited to translation unit ][ yes all ][ yes ]]
]

More detailed description follows:

[*1. [headerref boost/pfr/precise/ops.hpp `using namespace boost::pfr::ops;`] and [headerref boost/pfr/flat/ops.hpp `using namespace boost::pfr::flat_ops;`] approach]

This method is good if you're writing generic algorithms and need to use operators from Boost.PFR only if there's no operators defined for the type:

```
#include <boost/pfr/precise/ops.hpp>

template <class T>
struct uniform_comparator_less {
    bool operator()(const T& lhs, const T& rhs) const noexcept {
        using namespace boost::pfr::ops;    // Enables Boost.PFR operators usage in this scope.
        return lhs < rhs;           // If T has operator< or conversion operator then will use it, otherwise will use boost::pfr::flat_less<T>.
    }
};
```
This method's effects are local to the function. It works even for local types, like structures defined in functions.
However *Argument Dependant Lookup* does not work with it:

```
#include <boost/pfr/flat/ops.hpp>
template <class T>
struct uniform_comparator_less {
    bool operator()(const T& lhs, const T& rhs) const noexcept {
        using namespace flat_ops;
        return std::less{}(lhs, rhs);   // Compile time error if T has neither operator< nor conversion operator to comparable type.
    }
};
```

[*2. [macroref BOOST_PFR_FLAT_FUNCTIONS_FOR] and [macroref BOOST_PFR_PRECISE_FUNCTIONS_FOR] approach]

This method is good if you're writing POD structure and wish to define operators for that structure.
```
#include <boost/pfr/flat/functions_for.hpp>

struct pair_like {
    int first;
    short second;
};

BOOST_PFR_FLAT_FUNCTIONS_FOR(pair_like)   // Defines operators

// ...

assert(pair_like{1, 2} < pair_like{1, 3});
```
Argument Dependant Lookup works well, `std::less` will find the operators for `struct pair_like`. [macroref BOOST_PFR_FLAT_FUNCTIONS_FOR BOOST_PFR_FLAT_FUNCTIONS_FOR(T)]
can not be used for local types, it must be called only once in namespace of `T`. It does not respect conversion operators of `T`, so for example the following code
will output different values:
```
#include <boost/pfr/flat/functions_for.hpp>

struct empty {
    operator std::string() { return "empty{}"; }
};
// Uncomment to get different output:
// BOOST_PFR_FLAT_FUNCTIONS_FOR(empty)

// ...
std::cout << empty{}; // Outputs `empty{}` if BOOST_PFR_FLAT_FUNCTIONS_FOR(empty) is commented out, '{}' otherwise.
```

[*3. [headerref boost/pfr/flat/global_ops.hpp] and [headerref boost/pfr/precise/global_ops.hpp] approach]

This approach is for those, who wish to have comparisons/streaming/hashing for all their types.

```
#include <boost/pfr/flat/global_ops.hpp>

struct pair_like {
    int first;
    short second;
};

// ...

assert(pair_like{1, 2} < pair_like{1, 3});
```
Argument Dependant Lookup works well, `std::less` will find the operators for `struct pair_like`. Operators for local types will be also defined.
*All conversion operators of all POD types won't be used during comparisons/streaming/hashing.*

[endsect]

[endsect]


[section Short Examples for the Impatient]

[import ../example/quick_examples.cpp]

[pfr_quick_examples_structures]

Following examples use definition from above:

[table:quick_examples
[[ Code snippet ] [ `var` content or output ] [ Function description: ]]
[
    [ [pfr_quick_examples_flat_functors_uset] ]
    [ `my_uset` constains `var` ]
    [
        [classref boost::pfr::flat_hash]
    
        [classref boost::pfr::flat_equal_to] 
    ]
][
    [ [pfr_quick_examples_flat_functors_set] ]
    [ `my_set` constains `var` ]
    [ [classref boost::pfr::flat_less] ]
][
    [ [pfr_quick_examples_flat_ops] ]
    [ assert succeeds ]
    [ [headerref boost/pfr/flat/ops.hpp using\u00A0namespace\u00A0boost::pfr::flat_ops;] ]
][
    [ [pfr_quick_examples_ops] ]
    [ assert succeeds ]
    [ [headerref boost/pfr/precise/ops.hpp using\u00A0namespace\u00A0boost::pfr::ops;] ]
][
    [ [pfr_quick_examples_flat_for_each] ]
    [ `var == {B, {778, 4.14159}}` ]
    [ [funcref boost::pfr::flat_for_each_field] ]
][
    [ [pfr_quick_examples_for_each] ]
    [ `var == {B, {787, 103.142}}` ]
    [ [funcref boost::pfr::for_each_field] ]
][
    [ [pfr_quick_examples_flat_for_each_idx] ]
    [ ```0: char
1: int
2: double
``` ]
    [ [funcref boost::pfr::flat_for_each_field] ]
][
    [ [pfr_quick_examples_for_each_idx] ]
    [ ```0: char
1: quick_examples_ns::foo
``` ]
    [ [funcref boost::pfr::for_each_field] ]
][
    [ [pfr_quick_examples_tuple_size] ]
    [ `tuple_size: 2` ]
    [ [classref boost::pfr::tuple_size] ]
][
    [ [pfr_quick_examples_flat_tuple_size] ]
    [ `flat_tuple_size: 3` ]
    [ [classref boost::pfr::flat_tuple_size] ]
][
    [ [pfr_quick_examples_get_1] ]
    [ `var == {A {1, 2.0}}` ]
    [ [funcref boost::pfr::get] ]
][
    [ [pfr_quick_examples_flat_get_1] ]
    [ `var == {A, {1, 3.14159}}` ]
    [ [funcref boost::pfr::flat_get] ]
][
    [ [pfr_quick_examples_get_2] ]
    [ `var == {A, {777, 42.01}}` ]
    [ [funcref boost::pfr::get] ]
][
    [ [pfr_quick_examples_flat_get_2] ]
    [ `var == {A, {777, 42.01}}` ]
    [ [funcref boost::pfr::flat_get] ]
][
    [ [pfr_quick_examples_structure_to_tuple] ]
    [ `var == {A, {777, 3.14159}}` ]
    [ [funcref boost::pfr::structure_to_tuple] ]
][
    [ [pfr_quick_examples_flat_structure_to_tuple] ]
    [ `var == {A, {777, 3.14159}}` ]
    [ [funcref boost::pfr::flat_structure_to_tuple] ]
][
    [ [pfr_quick_examples_structure_tie] ]
    [ `var == {A, {1, 2.0}}` ]
    [ [funcref boost::pfr::structure_tie] ]
][
    [ [pfr_quick_examples_flat_structure_tie] ]
    [ `var == {C, {777, 3.14159}}` ]
    [ [funcref boost::pfr::flat_structure_tie] ]
]]


[endsect]


[section Configuration Macro]

By default Boost.PFR [*auto-detects your compiler abilities] and automatically defines the configuration macro into appropriate values. If you wish to override that behavior, just define:
[table:linkmacro Macros
    [[Macro name] [Effect]]
    [[*BOOST_PFR_USE_CPP17*] [Define to `1` if you wish to use structured bindings and other C++17 features for reflection. Define to `0` otherwize.]]
    [[*BOOST_PFR_USE_LOOPHOLE*] [Define to `1` if you wish to exploit [@http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#2118 CWG 2118] for reflection. Define to `0` otherwize.]]
]

Note that disabling [*Loophole] in C++14 significantly limitates the reflection abilities of the library. See next section for more info.


[endsect]


[section Requirements and Limitations]

[note Boost.PFR does not depend on any Boost library. You may use it's headers even without Boost. ]

* Boost.PFR *requires C++14 compatible compiler* (GCC-5.0+, Clang, ...)
* Static variables are ignored
* T must be aggregate initializable

[*Flat] functions limitations:

* T must be POD and must not contain references nor bitfields
* Enums will be returned as their underlying type

C++14 [*precise] functions limitations with manually disabled [*Loophole](C++17 or not disabling Loophole fixes those):

* T must be constexpr aggregate initializable and all it's fields must be constexpr default constructible
* [funcref boost::pfr::get], [funcref boost::pfr::structure_to_tuple], [funcref boost::pfr::structure_tie], [headerref boost/pfr/precise/core.hpp boost::pfr::tuple_element] require T to be a flat POD type

[endsect]

[section How it works]

Short description:

* Flat functions:
    # at compile-time: use aggregate initialization to detect fields count in user-provided structure
    # at compile-time: make a structure that is convertible to anything and remeber types it has been converted to during aggregate initialization of user-provided structure
    # at compile-time: using knowledge from previous steps create a tuple with exactly the same layout as in user-provided structure
    # at compile-time: find offsets for each field in user-provided structure using the tuple from previous step
    # at run-time: get pointer to each field, knowing the structure address and each field offset
    # at run-time: a tuple of references to fields is returned => all the tuple methods are available for the structure

* Precise functions:
    # at compile-time: use aggregate initialization to detect fields count in user-provided structure
        * C++17:
            # at compile-time: structured bindings are used to decompose a type `T` to known amount of fields
        * C++14:
            # Same approach as with [*flat] functions
        * C++14 with disabled [*Loophole]:
            # at compile-time: use flat reflection if it could precisely reflect the type. Otherwise:
            # at compile-time: let `I` be is an index of current field, it equals 0
            # at run-time: `T` is constructed and field `I` is aggregate initialized using a separate instance of structure that is convertible to anything [note Additional care is taken to make sure that all the information about `T` is available to the compiler and that operations on `T` have no side effects, so the compiler can optimize away the unnecessary temporary objects.]
            # at compile-time: `I += 1`
            # at compile-time: if `I` does not equal fields count goto step [~c.] from inside of the conversion operator of the structure that is convertible to anything
            # at compile-time: using knowledge from previous steps create a tuple with exactly the same layout as in user-provided structure
            # at compile-time: find offsets for each field in user-provided structure using the tuple from previous step
            # at run-time: get pointer to each field, knowing the structure address and each field offset
    # at run-time: a tuple of references to fields is returned => all the tuple methods are available for the structure

Long description of some basics: [@https://www.youtube.com/watch?v=abdeAew3gmQ Antony Polukhin: C++14 Reflections Without Macros, Markup nor External Tooling. ].

[endsect]

[section Acknowledgements]

Great thanks to Bruno Dutra for showing the technique to precisely reflect aggregate initializable type in C++14 [@https://github.com/apolukhin/magic_get/issues/5 Manual type registering/structured bindings might be unnecessary].

Great thanks to Alexandr Poltavsky for initial implementation the [*Loophole] technique and for describing it [@http://alexpolt.github.io/type-loophole.html in his blog].

Great thanks to Chris Beck for implementing the detect-offsets-and-get-field-address functionality that avoids Undefined Behavior of reinterpret_casting layout compatible structures.

[endsect]

[section Reference]
[xinclude autodoc_precise.xml]
[xinclude autodoc_flat.xml]
[xinclude autodoc_all.xml]
[endsect]
